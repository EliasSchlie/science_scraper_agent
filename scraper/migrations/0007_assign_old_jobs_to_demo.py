# Generated by Django 5.2.7 on 2025-10-25 10:34

from django.db import migrations


def assign_old_jobs_to_demo_user(apps, schema_editor):
    """Create demo user and assign all jobs without a user to it"""
    from django.contrib.auth.hashers import make_password

    User = apps.get_model('auth', 'User')
    ScraperJob = apps.get_model('scraper', 'ScraperJob')
    UserProfile = apps.get_model('scraper', 'UserProfile')

    # Create demo user if it doesn't exist
    demo_user, created = User.objects.get_or_create(
        username='demo',
        defaults={
            'email': 'demo@example.com',
            'password': make_password('demo_user_no_login_12345'),
            'is_active': True,
            'is_staff': False,
            'is_superuser': False,
        }
    )

    if created:
        # Create profile with unlimited credits for demo
        UserProfile.objects.create(user=demo_user, credits=999999)
        print(f"Created demo user with unlimited credits")

    # Assign all jobs without a user to demo user
    jobs_without_user = ScraperJob.objects.filter(user__isnull=True)
    count = jobs_without_user.count()

    if count > 0:
        jobs_without_user.update(user=demo_user)
        print(f"Assigned {count} old jobs to demo user")


def reverse_migration(apps, schema_editor):
    """Reverse the migration by setting jobs back to null user"""
    User = apps.get_model('auth', 'User')
    ScraperJob = apps.get_model('scraper', 'ScraperJob')

    try:
        demo_user = User.objects.get(username='demo')
        ScraperJob.objects.filter(user=demo_user).update(user=None)
        print("Reverted jobs back to null user")
    except User.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('scraper', '0006_scraperjob_credits_cost_scraperjob_user_userprofile'),
        ('auth', '__latest__'),
    ]

    operations = [
        migrations.RunPython(assign_old_jobs_to_demo_user, reverse_migration),
    ]
